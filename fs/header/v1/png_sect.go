package v1

import (
	"bytes"
	"fmt"
)

type PNGSect struct { // PNG faking
	Data []byte
}

const SizePNGSectData = 67

func (s PNGSect) String() string {
	return fmt.Sprintf("PNGSect{Data: [0:%v]byte{%x...%x}}",
		len(s.Data), s.Data[0:2], s.Data[len(s.Data)-2:])
}

func NewPNGSect() *PNGSect {
	return &PNGSect{Data: []byte{
		0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
		0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
		0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
		0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0x15, 0xC4,
		0x89, 0x00, 0x00, 0x00, 0x0A, 0x49, 0x44, 0x41,
		0x54, 0x78, 0x9C, 0x63, 0x00, 0x01, 0x00, 0x00,
		0x05, 0x00, 0x01, 0x0D, 0x0A, 0x2D, 0xB4, 0x00,
		0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE,
		0x42, 0x60, 0x82,
	}}
}

func (s *PNGSect) ToBytes() []byte {
	buf := bytes.Buffer{}
	buf.Write(s.Data)
	return buf.Bytes()
}

func (s *PNGSect) FromBytes(p []byte) error {
	buff := bytes.Buffer{}
	buff.Write(p)
	s.Data = buff.Bytes()
	if sectLen := s.Len(); sectLen != 67 {
		return fmt.Errorf("data length mismatch: %d, %d", 67, sectLen)
	}
	return nil
}

func (s *PNGSect) Len() int {
	return SizePNGSectData
}
